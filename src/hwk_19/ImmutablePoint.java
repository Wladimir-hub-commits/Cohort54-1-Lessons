package hwk_19;


/**
 * Author Waldemar Ilz
 * {code data} 19.11.2024
 */

/*
Task 3
Неизменяемый объект

Создайте класс ImmutablePoint:

•	Объявите final поля x и y типа int.
•	Инициализируйте их через конструктор.
•	Попытайтесь создать методы-сеттеры для изменения значений x и y.
•	Объясните, почему значения полей не могут быть изменены после
создания объекта.
 */

public class ImmutablePoint {

    private final int x;
    private final int y;

    // Конструктор для инициализации полей
    public ImmutablePoint(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Геттеры для доступа к полям
    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

   /*
    Попытка создания методов-сеттеров

    // Необходимо закомментировать или удалить эти методы, чтобы сохранить
    // неизменяемость
    /*
    public void setX(int x) {
        this.x = x; // Ошибка компиляции, так как x является final
    }

    public void setY(int y) {
        this.y = y; // Ошибка компиляции, так как y является final
    }
    */
}

/*
Объяснение неизменяемости
Использование final: Поля x и y объявлены как final, что означает,
что они могут быть инициализированы только один раз (в конструкторе) и
после этого не могут быть изменены. Попытка изменить значение любого из
этих полей приведет к ошибке компиляции.

Отсутствие методов-сеттеров: В отличие от изменяемых классов, в которые можно
добавить методы для изменения значений полей (сеттеры), в классе
ImmutablePoint мы не должны их создавать. Их наличия было бы достаточно,
чтобы сделать класс изменяемым.

Конструктор для инициализации: Поля инициализируются только через конструктор.
После создания объекта ImmutablePoint, его состояние не может быть изменено.
Это гарантирует, что объект всегда будет оставаться в неизменном состоянии
после его создания, что особенно полезно в многопоточном окружении,
где неизменяемые объекты могут использоваться без необходимости
синхронизации.

Таким образом, класс ImmutablePoint представляет собой хороший
пример неизменяемого объекта в Java.
*/

